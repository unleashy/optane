// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`- is not interpreted as an option 1`] = `
{
  "elements": [
    {
      "type": "free",
      "value": "-",
    },
  ],
  "errors": [],
}
`;

exports[`-- is interpreted as the end of options 1`] = `
{
  "elements": [
    {
      "type": "end-options",
    },
    {
      "type": "free",
      "value": "-a",
    },
  ],
  "errors": [],
}
`;

exports[`empty args 1`] = `
{
  "elements": [],
  "errors": [],
}
`;

exports[`empty strings are ignored 1`] = `
{
  "elements": [
    {
      "type": "free",
      "value": "a",
    },
    {
      "type": "free",
      "value": "b",
    },
    {
      "type": "free",
      "value": "c",
    },
  ],
  "errors": [],
}
`;

exports[`mixed arguments and options 1`] = `
{
  "elements": [
    {
      "type": "free",
      "value": "rice",
    },
    {
      "name": "sausage",
      "type": "option",
    },
    {
      "type": "free",
      "value": "french",
    },
    {
      "name": "f",
      "type": "option",
    },
    {
      "type": "free",
      "value": "ries",
    },
  ],
  "errors": [],
}
`;

exports[`multiple long options 1`] = `
{
  "elements": [
    {
      "name": "bread",
      "type": "option",
    },
    {
      "name": "eggs",
      "type": "option",
    },
    {
      "name": "ham",
      "type": "option",
    },
  ],
  "errors": [],
}
`;

exports[`multiple positional args 1`] = `
{
  "elements": [
    {
      "type": "free",
      "value": "foo",
    },
    {
      "type": "free",
      "value": "bar",
    },
    {
      "type": "free",
      "value": "baz",
    },
  ],
  "errors": [],
}
`;

exports[`multiple short options 1`] = `
{
  "elements": [
    {
      "name": "x",
      "type": "option",
    },
    {
      "name": "y",
      "type": "option",
    },
    {
      "name": "z",
      "type": "option",
    },
  ],
  "errors": [],
}
`;

exports[`one long option 1`] = `
{
  "elements": [
    {
      "name": "foo",
      "type": "option",
    },
  ],
  "errors": [],
}
`;

exports[`one positional arg 1`] = `
{
  "elements": [
    {
      "type": "free",
      "value": "foo",
    },
  ],
  "errors": [],
}
`;

exports[`one short option 1`] = `
{
  "elements": [
    {
      "name": "a",
      "type": "option",
    },
  ],
  "errors": [],
}
`;

exports[`short option starting with a number is not interpreted as an option 1`] = `
{
  "elements": [
    {
      "type": "free",
      "value": "-1",
    },
    {
      "type": "free",
      "value": "-2",
    },
    {
      "type": "free",
      "value": "-956",
    },
  ],
  "errors": [],
}
`;

exports[`short options must be a single character 1`] = `
{
  "elements": [],
  "errors": [
    "-foo: short options must only use a single character",
  ],
}
`;

exports[`snake-case becomes camelCase 1`] = `
{
  "elements": [
    {
      "name": "aB",
      "type": "option",
    },
    {
      "name": "fooBar",
      "type": "option",
    },
    {
      "name": "isTheThingOn",
      "type": "option",
    },
    {
      "name": "a",
      "type": "option",
    },
    {
      "name": "a--b--c",
      "type": "option",
    },
    {
      "name": "a-",
      "type": "option",
    },
    {
      "name": "-b",
      "type": "option",
    },
  ],
  "errors": [],
}
`;
